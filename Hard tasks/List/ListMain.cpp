#include "stdafx.h"
#include "List.h"

int _tmain(int argc, _TCHAR* argv[])

{
	setlocale(LC_CTYPE, "Russian");
	List L;
	cout << "Добавляем буквы в начало списка\n";

	for (int i = 0; i < 10; i++) {

		L.Push_Front('A' + i); // Заносим в начало списка буквы

		cout.put('A' + i);
	} // и выводим эти буквы

	cout << "\nСписок длиной " << L.Size() << " символов:\n";
	PrintList(L); // Вывод списка букв
	cout << "\nДобавляем цифры в конец списка\n";
	for (int i = 0; i < 9; i++) {
		L.Push_Back('1' + i); // Заносим в конец списка цифры
		cout.put('1' + i);
	} // и выводим эти цифры

	cout << "\nСписок длиной " << L.Size() << " символов:\n";
	PrintList(L); // Вывод общего списка
	List LD, LL; // LD - Список для цифр LL - список для букв

	cout << "\nРазделение исходн. списка на список из цифр и список из букв";
		int c;

	while (!L.Empty()) { // Пока список не пуст
		c = L.Front(); // Извлекаем символ из первого звена
		L.Pop_Front(); // Удаляем первое звено
		if (isdigit(c)) // Если цифра,
			LD.Push_Front(c); // вставляем ее в начало списка цифр
		else if (isalpha(c)) // Если буква,
			LL.Push_Back(c);
	} // вставляем ее в конец списка букв
	cout << "\nСписок из " << LL.Size()
		<< " букв. Буквы вставлялись в конец списка:\n";
	PrintList(LL);
	cout << "\nСписок из " << LD.Size()
		<< " цифр. Цифры вставлялись в начало списка:\n";
	PrintList(LD);
	List::Iterator p, q; // Итераторы
	for (p = LD.Begin(); p != LD.End(); ) { // Удаление из списка
		if (p != LD.End()) { // каждого второго звена
			q = p; // Итератор q
			++q; // опережает итератор p на один шаг
			if (q != LD.End()) // Если после p в списке есть звено,
				LD.EraseAfter(p);
		} // удаляем его
		if (p != LD.End()) // Если не достигнут конец списка,
			++p;
	} // сдвиг итератора к концу списка
	cout << "\nСписок цифр после удаления каждой второй цифры:\n";
		PrintList(LD);
	for (p = LD.Begin(); p != LD.End(); ++p)
		// Вставка признаков делимости
		if ((p->d - '0') % 3 == 0) // После цифры, делящейся на 3
			p = LD.InsertAfter(p, 'Y'); // вставка 'Y'
		else // После цифры, не делящейся на 3
			p = LD.InsertAfter(p, 'N'); // вставка 'N'
			// InsertAfter(p, …) возвращает итератор но звено, вставленное после p
		cout << "\nСписок LD с отметками: Y - число делится на 3, N – не делится : \n";
		PrintList(LD);
	cin.get();
	return 0;
}